//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/PlatformActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace BonusLevel.RidePlatform
{
    public partial class @RidePlatformControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @RidePlatformControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlatformActions"",
    ""maps"": [
        {
            ""name"": ""RidePlatform"",
            ""id"": ""cb4de7e5-862a-45e1-825f-82bac69da7bd"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""08a25d4f-0737-43c1-9207-13c41b6289a4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""c8188c52-fa6e-4f93-badb-b0b766414b20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""80b9f8f9-7e43-4e2e-945c-e964ef810732"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6ae76d0e-508b-4cbc-9b57-c89a4831a031"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5348afdb-08eb-4408-b245-2b2d842152ff"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fa7a9fee-c947-4ec7-b237-fc586177a732"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c880cdd1-5059-4b86-b8ed-f5c5eea37016"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""eab7f5bf-31a6-423c-8211-e33a978b8ea9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7dbaf506-2fc8-404c-aa77-e0720b4ed0d8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""53927538-aebb-45a5-9fba-f924ac1134de"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4c188e35-6086-42d3-b1d2-ae25352ca229"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fa7c7ead-260f-4b0d-8b6f-7fe053489675"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a306692d-806b-40a7-89c6-721d731747c1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // RidePlatform
            m_RidePlatform = asset.FindActionMap("RidePlatform", throwIfNotFound: true);
            m_RidePlatform_Move = m_RidePlatform.FindAction("Move", throwIfNotFound: true);
            m_RidePlatform_Use = m_RidePlatform.FindAction("Use", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // RidePlatform
        private readonly InputActionMap m_RidePlatform;
        private List<IRidePlatformActions> m_RidePlatformActionsCallbackInterfaces = new List<IRidePlatformActions>();
        private readonly InputAction m_RidePlatform_Move;
        private readonly InputAction m_RidePlatform_Use;
        public struct RidePlatformActions
        {
            private @RidePlatformControls m_Wrapper;
            public RidePlatformActions(@RidePlatformControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_RidePlatform_Move;
            public InputAction @Use => m_Wrapper.m_RidePlatform_Use;
            public InputActionMap Get() { return m_Wrapper.m_RidePlatform; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RidePlatformActions set) { return set.Get(); }
            public void AddCallbacks(IRidePlatformActions instance)
            {
                if (instance == null || m_Wrapper.m_RidePlatformActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_RidePlatformActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
            }

            private void UnregisterCallbacks(IRidePlatformActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Use.started -= instance.OnUse;
                @Use.performed -= instance.OnUse;
                @Use.canceled -= instance.OnUse;
            }

            public void RemoveCallbacks(IRidePlatformActions instance)
            {
                if (m_Wrapper.m_RidePlatformActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IRidePlatformActions instance)
            {
                foreach (var item in m_Wrapper.m_RidePlatformActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_RidePlatformActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public RidePlatformActions @RidePlatform => new RidePlatformActions(this);
        public interface IRidePlatformActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnUse(InputAction.CallbackContext context);
        }
    }
}
